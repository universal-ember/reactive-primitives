{"version":3,"file":"service.js","sources":["../../src/resource/service.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { getValue } from '@glimmer/tracking/primitives/cache';\nimport { assert } from '@ember/debug';\nimport { associateDestroyableChild } from '@ember/destroyable';\nimport { invokeHelper } from '@ember/helper';\nimport {\n  dependencySatisfies,\n  importSync,\n  isDevelopingApp,\n  isTesting,\n  macroCondition,\n} from '@embroider/macros';\n\nimport type Owner from '@ember/owner';\nimport type { Stage1DecoratorDescriptor } from '#types';\n\nlet getOwner: (context: unknown) => Owner | undefined;\n\nif (macroCondition(dependencySatisfies('ember-source', '>=4.12.0'))) {\n  // Using 'any' here because importSync can't lookup types correctly\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  getOwner = (importSync('@ember/owner') as any).getOwner;\n} else {\n  // Using 'any' here because importSync can't lookup types correctly\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  getOwner = (importSync('@ember/application') as any).getOwner;\n}\n\n/**\n * In order for the same cache to be used for all references\n * in an app, this variable needs to be in module scope.\n *\n * When the owner is destroyed, the cache is cleared\n * (because the WeakMap will see that nothing is referencing the key (owner) anymore)\n *\n * @internal\n */\nexport const __secret_service_cache__ = new WeakMap<Owner, Map<object, any>>();\n\n/**\n * For testing purposes, this allows us to replace a service with a \"mock\".\n */\nconst REPLACEMENTS = new WeakMap<Owner, Map<object, object>>();\n\n/**\n * <div class=\"callout note\">\n *\n * This is not a core part of ember-resources, but demonstrates how services *are* an extension of resources.  This utility should be considered a prototype, but this utility is still under the broader library's SemVer policy.\n *\n * A consuming app will not pay for the bytes of this utility unless imported.\n *\n * </div>\n *\n * An alternative to Ember's built in `@service` decorator.\n *\n * This decorator takes a resource and ties the resource's lifeime to the app / owner.\n *\n * The reason a resource is required, as opposed to allowing \"any class\", is that a\n * resource already has implemented the concept of \"teardown\" or \"cleanup\",\n * and native classes do not have this concept.\n *\n * Example:\n *\n * ```js\n * import Component from '@glimmer/component';\n * import { resource } from 'ember-resources';\n * import { service } from 'reactiveweb/resource/service';\n *\n * class PlanetsAPI { ... }\n *\n * const Planets = resource(({ on, owner }) => {\n *   let api = new PlanetsAPI(owner); // for further injections\n *\n *   // on cleanup, we want to cancel any pending requests\n *   on.cleanup(() => api.abortAll());\n *\n *   return api;\n * });\n *\n * class Demo extends Component {\n *   @service(Planets) planets;\n * }\n * ```\n *\n * For Stage 1 decorators and typescript, you'll need to manually declare the type:\n * ```ts\n * class Demo extends Component {\n *   @service(Planets) declare planets: Planets;\n * }\n * ```\n */\nexport function service(resource: unknown) {\n  /**\n   * In order for resources to be instantiated this way, we need to copy a little bit of code from\n   * `@use`, as we still need to rely on `invokeHelper`.\n   *\n   * The main difference being that instead of using `this` for the parent to `invokeHelper`,\n   * we use the owner.\n   *\n   * BIG NOTE RELATED TO TYPE SAFETY:\n   *  - the `resource` argument is typed as `unknown` because the user-land types\n   *    are lies so that DX is useful. The actual internal representation of a resource is an object\n   *    with some properties with some hints for type narrowing\n   */\n\n  // Deliberately separate comment so the above dev-comment doesn't make its way to\n  // consumers\n  // PropertyDecorator\n  return function legacyServiceDecorator(\n    _prototype: object,\n    key: string,\n    descriptor?: Stage1DecoratorDescriptor\n  ) {\n    if (!descriptor) return;\n\n    assert(`@service(...) can only be used with string-keys`, typeof key === 'string');\n\n    assert(\n      `@service(...) may not be used with an initializer. For example, ` +\n        `\\`@service(MyService) property;\\``,\n      !descriptor.initializer\n    );\n\n    assert(\n      `Expected passed resource to be a valid resource definition.`,\n      typeof resource === 'function' || (typeof resource === 'object' && resource !== null)\n    );\n\n    return {\n      get(this: object) {\n        let owner = getOwner(this);\n\n        assert(\n          `owner was not found on instance of ${this.constructor.name}. ` +\n            `Has it been linked up correctly with setOwner?` +\n            `If this error has occured in a framework-controlled class, something has gone wrong.`,\n          owner\n        );\n\n        assert(`Resource definition is invalid`, isResourceType(resource));\n\n        if (macroCondition(isTesting() || isDevelopingApp())) {\n          let cachedReplacements = ensureCaches(owner, REPLACEMENTS);\n\n          let replacement = cachedReplacements.get(resource);\n\n          if (replacement) {\n            resource = replacement;\n\n            assert(`Replacement Resource definition is invalid`, isResourceType(resource));\n          }\n        }\n\n        let caches = ensureCaches(owner);\n        let cache = caches.get(resource);\n\n        if (!cache) {\n          if ('type' in resource) {\n            assert(\n              `When using resources with @service(...), do not call .from() on class-based resources. ` +\n                `Resources used as services may not take arguments.`,\n              resource.type === 'function-based'\n            );\n\n            cache = invokeHelper(owner, resource);\n            caches.set(resource, cache);\n            associateDestroyableChild(owner, cache);\n          } else if ('from' in resource) {\n            /**\n             * We do a lot of lying internally to make TypeScript nice for consumers.\n             * But it does mean that we have to cast in our own code.\n             */\n            let { definition } = (resource as any).from(() => []) as unknown as any;\n\n            cache = invokeHelper(owner, definition);\n            caches.set(resource, cache);\n            associateDestroyableChild(owner, cache);\n          }\n        }\n\n        return getValue(cache);\n      },\n    } as unknown as void /* thanks, TS. */;\n  };\n}\n\nfunction ensureCaches(owner: Owner, cache = __secret_service_cache__) {\n  let caches = cache.get(owner);\n\n  if (!caches) {\n    caches = new Map();\n    cache.set(owner, caches);\n  }\n\n  return caches;\n}\n\nfunction isResourceType(resource: unknown): resource is any {\n  // The internal representation of the passed resource will not match its type.\n  // A resource is always either a class definition, or the custom internal object.\n  // (See the helper managers for details)\n  return typeof resource === 'function' || (typeof resource === 'object' && resource !== null);\n}\n\ninterface RegisterOptions {\n  /**\n   * The original service to replace.\n   */\n  original: unknown;\n  /**\n   * The replacement service to use.\n   */\n  replacement: unknown;\n}\n\n/**\n *\n */\nexport function serviceOverride(owner: Owner, { original, replacement }: RegisterOptions) {\n  if (macroCondition(!isTesting() && !isDevelopingApp())) {\n    throw new Error(\n      '@service is experimental and `serviceOverride` is not available in production builds.'\n    );\n  }\n\n  let caches = ensureCaches(owner);\n\n  assert(`Original Resource definition is invalid`, isResourceType(original));\n  assert(`Replacement Resource definition is invalid`, isResourceType(replacement));\n\n  assert(`Cannot re-register service after it has been accessed.`, !caches.has(original));\n\n  let replacementCache = ensureCaches(owner, REPLACEMENTS);\n\n  replacementCache.set(original, replacement);\n}\n"],"names":["getOwner","macroCondition","dependencySatisfies","importSync","__secret_service_cache__","WeakMap","REPLACEMENTS","service","resource","legacyServiceDecorator","_prototype","key","descriptor","assert","initializer","get","owner","constructor","name","isResourceType","isTesting","isDevelopingApp","cachedReplacements","ensureCaches","replacement","caches","cache","type","invokeHelper","set","associateDestroyableChild","definition","from","getValue","Map","serviceOverride","original","Error","has","replacementCache"],"mappings":";;;;;;AAAA;AAgBA,IAAIA,QAAiD,CAAA;AAErD,IAAIC,cAAc,CAACC,mBAAmB,CAAC,cAAc,EAAE,UAAU,CAAC,CAAC,EAAE;AACnE;AACA;AACAF,EAAAA,QAAQ,GAAIG,UAAU,CAAC,cAAc,CAAC,CAASH,QAAQ,CAAA;AACzD,CAAC,MAAM;AACL;AACA;AACAA,EAAAA,QAAQ,GAAIG,UAAU,CAAC,oBAAoB,CAAC,CAASH,QAAQ,CAAA;AAC/D,CAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACaI,wBAAwB,GAAG,IAAIC,OAAO,GAA2B;;AAE9E;AACA;AACA;AACA,MAAMC,YAAY,GAAG,IAAID,OAAO,EAA8B,CAAA;;AAE9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAASE,OAAOA,CAACC,QAAiB,EAAE;AACzC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEE;AACA;AACA;EACA,OAAO,SAASC,sBAAsBA,CACpCC,UAAkB,EAClBC,GAAW,EACXC,UAAsC,EACtC;IACA,IAAI,CAACA,UAAU,EAAE,OAAA;AAEjBC,IAAAA,MAAM,CAAC,CAAiD,+CAAA,CAAA,EAAE,OAAOF,GAAG,KAAK,QAAQ,CAAC,CAAA;IAElFE,MAAM,CACJ,kEAAkE,GAChE,CAAA,iCAAA,CAAmC,EACrC,CAACD,UAAU,CAACE,WACd,CAAC,CAAA;AAEDD,IAAAA,MAAM,CACJ,CAA6D,2DAAA,CAAA,EAC7D,OAAOL,QAAQ,KAAK,UAAU,IAAK,OAAOA,QAAQ,KAAK,QAAQ,IAAIA,QAAQ,KAAK,IAClF,CAAC,CAAA;IAED,OAAO;AACLO,MAAAA,GAAGA,GAAe;AAChB,QAAA,IAAIC,KAAK,GAAGhB,QAAQ,CAAC,IAAI,CAAC,CAAA;AAE1Ba,QAAAA,MAAM,CACJ,CAAA,mCAAA,EAAsC,IAAI,CAACI,WAAW,CAACC,IAAI,CAAI,EAAA,CAAA,GAC7D,CAAgD,8CAAA,CAAA,GAChD,CAAsF,oFAAA,CAAA,EACxFF,KACF,CAAC,CAAA;AAEDH,QAAAA,MAAM,CAAC,CAAgC,8BAAA,CAAA,EAAEM,cAAc,CAACX,QAAQ,CAAC,CAAC,CAAA;QAElE,IAAIP,cAAc,CAACmB,SAAS,EAAE,IAAIC,eAAe,EAAE,CAAC,EAAE;AACpD,UAAA,IAAIC,kBAAkB,GAAGC,YAAY,CAACP,KAAK,EAAEV,YAAY,CAAC,CAAA;AAE1D,UAAA,IAAIkB,WAAW,GAAGF,kBAAkB,CAACP,GAAG,CAACP,QAAQ,CAAC,CAAA;AAElD,UAAA,IAAIgB,WAAW,EAAE;AACfhB,YAAAA,QAAQ,GAAGgB,WAAW,CAAA;AAEtBX,YAAAA,MAAM,CAAC,CAA4C,0CAAA,CAAA,EAAEM,cAAc,CAACX,QAAQ,CAAC,CAAC,CAAA;AAChF,WAAA;AACF,SAAA;AAEA,QAAA,IAAIiB,MAAM,GAAGF,YAAY,CAACP,KAAK,CAAC,CAAA;AAChC,QAAA,IAAIU,KAAK,GAAGD,MAAM,CAACV,GAAG,CAACP,QAAQ,CAAC,CAAA;QAEhC,IAAI,CAACkB,KAAK,EAAE;UACV,IAAI,MAAM,IAAIlB,QAAQ,EAAE;YACtBK,MAAM,CACJ,CAAyF,uFAAA,CAAA,GACvF,CAAoD,kDAAA,CAAA,EACtDL,QAAQ,CAACmB,IAAI,KAAK,gBACpB,CAAC,CAAA;AAEDD,YAAAA,KAAK,GAAGE,YAAY,CAACZ,KAAK,EAAER,QAAQ,CAAC,CAAA;AACrCiB,YAAAA,MAAM,CAACI,GAAG,CAACrB,QAAQ,EAAEkB,KAAK,CAAC,CAAA;AAC3BI,YAAAA,yBAAyB,CAACd,KAAK,EAAEU,KAAK,CAAC,CAAA;AACzC,WAAC,MAAM,IAAI,MAAM,IAAIlB,QAAQ,EAAE;AAC7B;AACZ;AACA;AACA;YACY,IAAI;AAAEuB,cAAAA,UAAAA;AAAW,aAAC,GAAIvB,QAAQ,CAASwB,IAAI,CAAC,MAAM,EAAE,CAAmB,CAAA;AAEvEN,YAAAA,KAAK,GAAGE,YAAY,CAACZ,KAAK,EAAEe,UAAU,CAAC,CAAA;AACvCN,YAAAA,MAAM,CAACI,GAAG,CAACrB,QAAQ,EAAEkB,KAAK,CAAC,CAAA;AAC3BI,YAAAA,yBAAyB,CAACd,KAAK,EAAEU,KAAK,CAAC,CAAA;AACzC,WAAA;AACF,SAAA;QAEA,OAAOO,QAAQ,CAACP,KAAK,CAAC,CAAA;AACxB,OAAA;AACF,KAAC,mBAAoB;GACtB,CAAA;AACH,CAAA;AAEA,SAASH,YAAYA,CAACP,KAAY,EAAEU,KAAK,GAAGtB,wBAAwB,EAAE;AACpE,EAAA,IAAIqB,MAAM,GAAGC,KAAK,CAACX,GAAG,CAACC,KAAK,CAAC,CAAA;EAE7B,IAAI,CAACS,MAAM,EAAE;AACXA,IAAAA,MAAM,GAAG,IAAIS,GAAG,EAAE,CAAA;AAClBR,IAAAA,KAAK,CAACG,GAAG,CAACb,KAAK,EAAES,MAAM,CAAC,CAAA;AAC1B,GAAA;AAEA,EAAA,OAAOA,MAAM,CAAA;AACf,CAAA;AAEA,SAASN,cAAcA,CAACX,QAAiB,EAAmB;AAC1D;AACA;AACA;AACA,EAAA,OAAO,OAAOA,QAAQ,KAAK,UAAU,IAAK,OAAOA,QAAQ,KAAK,QAAQ,IAAIA,QAAQ,KAAK,IAAK,CAAA;AAC9F,CAAA;AAaA;AACA;AACA;AACO,SAAS2B,eAAeA,CAACnB,KAAY,EAAE;EAAEoB,QAAQ;AAAEZ,EAAAA,WAAAA;AAA6B,CAAC,EAAE;AACxF,EAAA,IAAIvB,cAAc,CAAC,CAACmB,SAAS,EAAE,IAAI,CAACC,eAAe,EAAE,CAAC,EAAE;AACtD,IAAA,MAAM,IAAIgB,KAAK,CACb,uFACF,CAAC,CAAA;AACH,GAAA;AAEA,EAAA,IAAIZ,MAAM,GAAGF,YAAY,CAACP,KAAK,CAAC,CAAA;AAEhCH,EAAAA,MAAM,CAAC,CAAyC,uCAAA,CAAA,EAAEM,cAAc,CAACiB,QAAQ,CAAC,CAAC,CAAA;AAC3EvB,EAAAA,MAAM,CAAC,CAA4C,0CAAA,CAAA,EAAEM,cAAc,CAACK,WAAW,CAAC,CAAC,CAAA;EAEjFX,MAAM,CAAC,CAAwD,sDAAA,CAAA,EAAE,CAACY,MAAM,CAACa,GAAG,CAACF,QAAQ,CAAC,CAAC,CAAA;AAEvF,EAAA,IAAIG,gBAAgB,GAAGhB,YAAY,CAACP,KAAK,EAAEV,YAAY,CAAC,CAAA;AAExDiC,EAAAA,gBAAgB,CAACV,GAAG,CAACO,QAAQ,EAAEZ,WAAW,CAAC,CAAA;AAC7C;;;;"}